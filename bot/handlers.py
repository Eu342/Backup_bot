from config.settings import telegram_bot, dp, ADMIN_LIST, logger, DUMPS_DIR, ERROR_DUMPS_DIR, ALL_DBS
from bot.states import DeployStates, BackupCreateStates
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from pathlib import Path
from deploy.deploy import deploy_dump
from backups.utils import run_subprocess, read_file_lines, unlink_file, async_archive_dump
from backups.manager import create_backup_for_db
import zipfile
import os
import asyncio
from datetime import datetime

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handlers.py, dp id: {id(dp)}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.reply(f"–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–∞—à ID: {message.from_user.id}")

@dp.message(Command("backup_deploy"))
async def cmd_backup_deploy(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /backup_deploy."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /backup_deploy –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if str(message.from_user.id) not in ADMIN_LIST:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /backup_deploy –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        sent_message = await message.reply(
            "‚¨áÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–∞–º–ø–∞ (.sql –∏–ª–∏ .zip) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏–∂–µ</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.update_data(current_message_id=sent_message.message_id, chat_id=sent_message.chat.id)
        await state.set_state(DeployStates.waiting_for_dump)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_dump –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_backup_deploy: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(Command("backup_create"))
async def cmd_backup_create(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /backup_create —Å –≤—ã–±–æ—Ä–æ–º –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /backup_create –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if str(message.from_user.id) not in ADMIN_LIST:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /backup_create –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤—ã –Ω–µ –∞–¥–º–∏–Ω.")
        return
    
    try:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{db['name']} ({db['type']})", callback_data=f"select_db:{db['name']}:{db['type']}")]
            for db in ALL_DBS
        ])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_backup_create")])
        
        sent_message = await message.reply(
            "‚¨áÔ∏è <b>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.update_data(current_message_id=sent_message.message_id, chat_id=sent_message.chat.id)
        await state.set_state(BackupCreateStates.waiting_for_db_selection)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ BackupCreateStates.waiting_for_db_selection –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_backup_create: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("select_db:"))
async def process_db_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã –¥–ª—è –±—ç–∫–∞–ø–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback select_db –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    
    try:
        await callback.answer("–ë—ç–∫–∞–ø –Ω–∞—á–∞—Ç...")
        
        _, db_name, db_type = callback.data.split(':')
        logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞: {db_name} ({db_type})")
        
        db_config = next((db['config'] for db in ALL_DBS if db['name'] == db_name and db['type'] == db_type), None)
        if not db_config:
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=None
            )
            await state.clear()
            return
        
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"üîÑ <b>–°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø {db_name}‚Ä¶</b>",
            reply_markup=None,
            parse_mode="HTML"
        )
        
        result = await create_backup_for_db(db_config, db_type)
        
        if not result:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"retry_backup:{db_name}:{db_type}")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_backup_create")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"‚ùå –ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                reply_markup=keyboard
            )
            logger.warning(f"–ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ —Å–æ–∑–¥–∞–Ω")
            await state.clear()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML, –∏–º—è –¥–∞–º–ø–∞ –≤ —Ä–∞–º–æ—á–∫–µ –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ
        timestamp = datetime.now().strftime("%H:%M %d.%m.%Y")
        response = (
            f"<b>‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üóÑÔ∏è <b>–ë–∞–∑–∞</b>: {db_name}\n"
            f"üìÅ <b>–§–∞–π–ª</b>: <a href=\"tg://btn/copy_file:{result['archive']}\"><code>{result['archive']}</code></a>\n"
            f"üìÖ <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è</b>: {timestamp}"
        )
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", url=result.get('download_url', '')) if result.get('download_url') else InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å (–Ω–µ—Ç URL)", callback_data="no_url"),
                InlineKeyboardButton(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"deploy_backup:{result['archive']}")
            ],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ])
        
        try:
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=response,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –±—ç–∫–∞–ø–∞ {db_name}: {response}")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTML –≤ process_db_selection: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            fallback_response = (
                f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                f"üóÑÔ∏è –ë–∞–∑–∞: {db_name}\n"
                f"üìÅ –§–∞–π–ª: {result['archive']}\n"
                f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}"
            )
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=fallback_response,
                reply_markup=keyboard
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –±–µ–∑ HTML –¥–ª—è –±—ç–∫–∞–ø–∞ {db_name}: {fallback_response}")
        
        await state.clear()
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram –≤ process_db_selection: {e}")
        await telegram_bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /backup_create."
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_db_selection –¥–ª—è {db_name}: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"retry_backup:{db_name}:{db_type}")],
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_backup_create")]
        ])
        try:
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"‚ùå –ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                reply_markup=keyboard
            )
        except TelegramBadRequest:
            await telegram_bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                reply_markup=keyboard
            )
        await state.clear()

@dp.callback_query(lambda c: c.data.startswith("retry_backup:"))
async def retry_backup(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback retry_backup –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    try:
        _, db_name, db_type = callback.data.split(':')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_backup_create")]
        ])
        sent_message = await callback.message.edit_text(
            f"üîÑ <b>–°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø {db_name}‚Ä¶</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.update_data(current_message_id=sent_message.message_id, chat_id=sent_message.chat.id)
        await state.set_state(BackupCreateStates.waiting_for_db_selection)
        
        db_config = next((db['config'] for db in ALL_DBS if db['name'] == db_name and db['type'] == db_type), None)
        if not db_config:
            await telegram_bot.edit_message_text(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                text="–û—à–∏–±–∫–∞: –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=None
            )
            await state.clear()
            return
        
        result = await create_backup_for_db(db_config, db_type)
        
        if not result:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"retry_backup:{db_name}:{db_type}")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="cancel_backup_create")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                text=f"‚ùå –ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω",
                reply_markup=keyboard
            )
            logger.warning(f"–ë—ç–∫–∞–ø –¥–ª—è {db_name} –Ω–µ —Å–æ–∑–¥–∞–Ω")
            await state.clear()
            return
        
        timestamp = datetime.now().strftime("%H:%M %d.%m.%Y")
        response = (
            f"<b>‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"üóÑÔ∏è <b>–ë–∞–∑–∞</b>: {db_name}\n"
            f"üìÅ <b>–§–∞–π–ª</b>: <a href=\"tg://btn/copy_file:{result['archive']}\"><code>{result['archive']}</code></a>\n"
            f"üìÖ <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è</b>: {timestamp}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", url=result.get('download_url', '')) if result.get('download_url') else InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å (–Ω–µ—Ç URL)", callback_data="no_url"),
                InlineKeyboardButton(text="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", callback_data=f"deploy_backup:{result['archive']}")
            ],
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message")]
        ])
        
        try:
            await telegram_bot.edit_message_text(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                text=response,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –±—ç–∫–∞–ø–∞ {db_name}: {response}")
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTML –≤ retry_backup: {e}")
            fallback_response = (
                f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                f"üóÑÔ∏è –ë–∞–∑–∞: {db_name}\n"
                f"üìÅ –§–∞–π–ª: {result['archive']}\n"
                f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}"
            )
            await telegram_bot.edit_message_text(
                chat_id=sent_message.chat.id,
                message_id=sent_message.message_id,
                text=fallback_response,
                reply_markup=keyboard
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –±–µ–∑ HTML –¥–ª—è –±—ç–∫–∞–ø–∞ {db_name}: {fallback_response}")
        
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ retry_backup: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {e}")
        await state.clear()
        await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("copy_file:"))
async def copy_file_name(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback copy_file –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    try:
        _, file_name = callback.data.split(':')
        await callback.answer(text=f"{file_name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", show_alert=True)
        logger.debug(f"–ò–º—è —Ñ–∞–π–ª–∞ {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ copy_file_name: {e}")
        await callback.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("deploy_backup:"))
async def deploy_backup(callback: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback deploy_backup –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {callback.data}")
    try:
        _, archive_name = callback.data.split(':')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        sent_message = await callback.message.reply(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {archive_name}. ‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ IP —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.update_data(
            current_message_id=sent_message.message_id,
            chat_id=sent_message.chat.id,
            dump_path=str(DUMPS_DIR / archive_name.split('_')[0] / archive_name),
            db_type='postgresql' if 'opengater_prod' in archive_name else 'mysql' if 'opengater_test' in archive_name else 'mariadb'
        )
        await state.set_state(DeployStates.waiting_for_ip)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_ip –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è {archive_name}")
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ deploy_backup: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
        await state.clear()
        await callback.answer()

@dp.callback_query(lambda c: c.data == "close_message")
async def close_message(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback close_message –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        await callback.message.delete()
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ close_message: {e}")
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_backup_create")
async def cancel_backup_create(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback cancel_backup_create –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        await callback.message.delete()
        await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_deploy")
async def cancel_deploy(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback cancel_deploy –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        await callback.message.delete()
        await callback.message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        await callback.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()
    await callback.answer()

@dp.message(DeployStates.waiting_for_dump)
async def process_dump(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–º–ø–∞ (—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –¥–∞–º–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    dump_path = None
    temp_file = None
    temp_zip = None
    try:
        if message.document:
            logger.debug("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–∞–º–ø–∞ —á–µ—Ä–µ–∑ Telegram")
            file = await telegram_bot.get_file(message.document.file_id)
            file_path = file.file_path
            file_name = message.document.file_name
            if not file_name.endswith(('.sql', '.zip')):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                ])
                await telegram_bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_message_id,
                    text="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ .sql –∏–ª–∏ .zip.",
                    reply_markup=keyboard
                )
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {file_name}")
                return
            
            temp_file = DUMPS_DIR / file_name
            await telegram_bot.download_file(file_path, temp_file)
            logger.debug(f"–°–∫–∞—á–∞–Ω —Ñ–∞–π–ª –¥–∞–º–ø–∞: {temp_file}")
            
            if file_name.endswith('.zip'):
                with zipfile.ZipFile(temp_file, 'r') as zf:
                    sql_files = [f for f in zf.namelist() if f.endswith('.sql')]
                    if not sql_files:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                        ])
                        await telegram_bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=current_message_id,
                            text="ZIP-–∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .sql —Ñ–∞–π–ª–æ–≤.",
                            reply_markup=keyboard
                        )
                        await unlink_file(temp_file)
                        logger.error(f"ZIP-–∞—Ä—Ö–∏–≤ {temp_file} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .sql —Ñ–∞–π–ª–æ–≤")
                        return
                    if len(sql_files) > 1:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                        ])
                        await telegram_bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=current_message_id,
                            text="ZIP-–∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ .sql —Ñ–∞–π–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                            reply_markup=keyboard
                        )
                        await unlink_file(temp_file)
                        logger.error(f"ZIP-–∞—Ä—Ö–∏–≤ {temp_file} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ .sql —Ñ–∞–π–ª–æ–≤")
                        return
                    zf.extract(sql_files[0], DUMPS_DIR)
                    dump_path = DUMPS_DIR / sql_files[0]
                await unlink_file(temp_file)
                logger.debug(f"–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω ZIP, –¥–∞–º–ø: {dump_path}")
            else:
                dump_path = temp_file
        else:
            file_name = message.text.strip()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –¥–∞–º–ø–∞: {file_name}")
            dump_path = None
            for db_dir in DUMPS_DIR.iterdir():
                if db_dir.is_dir():
                    zip_path = db_dir / file_name
                    if zip_path.exists() and zip_path.suffix == '.zip':
                        temp_zip = zip_path
                        with zipfile.ZipFile(temp_zip, 'r') as zf:
                            sql_files = [f for f in zf.namelist() if f.endswith('.sql')]
                            if not sql_files:
                                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                                ])
                                await telegram_bot.edit_message_text(
                                    chat_id=chat_id,
                                    message_id=current_message_id,
                                    text=f"ZIP-–∞—Ä—Ö–∏–≤ {file_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .sql —Ñ–∞–π–ª–æ–≤.",
                                    reply_markup=keyboard
                                )
                                logger.error(f"ZIP-–∞—Ä—Ö–∏–≤ {file_name} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç .sql —Ñ–∞–π–ª–æ–≤")
                                return
                            if len(sql_files) > 1:
                                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                                ])
                                await telegram_bot.edit_message_text(
                                    chat_id=chat_id,
                                    message_id=current_message_id,
                                    text=f"ZIP-–∞—Ä—Ö–∏–≤ {file_name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ .sql —Ñ–∞–π–ª–æ–≤. –£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                                    reply_markup=keyboard
                                )
                                logger.error(f"ZIP-–∞—Ä—Ö–∏–≤ {file_name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ .sql —Ñ–∞–π–ª–æ–≤")
                                return
                            zf.extract(sql_files[0], DUMPS_DIR)
                            dump_path = DUMPS_DIR / sql_files[0]
                        logger.debug(f"–†–∞—Å–ø–∞–∫–æ–≤–∞–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤: {dump_path}")
                        break
                    sql_path = db_dir / file_name
                    if sql_path.exists() and sql_path.suffix == '.sql':
                        dump_path = sql_path
                        logger.debug(f"–ù–∞–π–¥–µ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π .sql –¥–∞–º–ø: {dump_path}")
                        break
                    if not file_name.endswith(('.sql', '.zip')):
                        sql_path = db_dir / f"{file_name}.sql"
                        if sql_path.exists():
                            dump_path = sql_path
                            logger.debug(f"–ù–∞–π–¥–µ–Ω —É–∫–∞–∑–∞–Ω–Ω—ã–π .sql –¥–∞–º–ø: {dump_path}")
                            break
            
            if not dump_path or not dump_path.exists():
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                ])
                await telegram_bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_message_id,
                    text=f"–î–∞–º–ø {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {DUMPS_DIR}. –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .sql –∏–ª–∏ .zip —Ñ–∞–π–ª.",
                    reply_markup=keyboard
                )
                logger.error(f"–î–∞–º–ø {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {DUMPS_DIR}")
                return
        
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ–ø—ã—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫
        try:
            full_content = await asyncio.to_thread(lambda: open(dump_path, 'r', encoding='utf-8').read())
        except UnicodeDecodeError:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {dump_path} –∫–∞–∫ UTF-8, –ø—Ä–æ–±—É–µ–º latin1")
            try:
                full_content = await asyncio.to_thread(lambda: open(dump_path, 'r', encoding='latin1').read())
            except UnicodeDecodeError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {dump_path} –¥–∞–∂–µ –∫–∞–∫ latin1: {e}")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                ])
                await telegram_bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_message_id,
                    text="–û—à–∏–±–∫–∞: –¥–∞–º–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω.",
                    reply_markup=keyboard
                )
                if temp_file and temp_file.exists():
                    await unlink_file(temp_file)
                if dump_path and dump_path.exists() and dump_path != temp_file:
                    await unlink_file(dump_path)
                return
        
        if not any(keyword in full_content.lower() for keyword in ['create table', 'insert into']):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–î–∞–º–ø –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü/–¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=keyboard
            )
            logger.error(f"–î–∞–º–ø {dump_path} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü/–¥–∞–Ω–Ω—ã—Ö")
            if temp_file and temp_file.exists():
                await unlink_file(temp_file)
            if dump_path and dump_path.exists() and dump_path != temp_file:
                await unlink_file(dump_path)
            return
        
        first_lines = await read_file_lines(dump_path, num_lines=100)
        logger.debug(f"–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–º–ø–∞ {dump_path}:\n{first_lines[:200]}")
        mysql_keywords = ['/*!40101 set', '-- mysql dump', 'engine=innodb', 'lock tables']
        postgresql_keywords = ['create schema', 'set search_path', 'create sequence', 'copy public.']
        found_mysql = [kw for kw in mysql_keywords if kw in first_lines.lower()]
        found_postgresql = [kw for kw in postgresql_keywords if kw in first_lines.lower()]
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ MySQL: {found_mysql}")
        logger.debug(f"–ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ PostgreSQL: {found_postgresql}")
        if found_mysql:
            db_type = 'mysql'
        elif found_postgresql:
            db_type = 'postgresql'
        else:
            db_type = 'postgresql'
            logger.warning(f"–¢–∏–ø –¥–∞–º–ø–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: postgresql")
        logger.debug(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø –¥–∞–º–ø–∞: {db_type}")
        
        await state.update_data(
            dump_path=str(dump_path),
            db_type=db_type,
            temp_file=temp_file,
            temp_zip=temp_zip,
            dump_message="‚¨áÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–∞–º–ø–∞ (.sql –∏–ª–∏ .zip) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏–∂–µ</b>"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dump")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–î–∞–º–ø –ø—Ä–∏–Ω—è—Ç ({'PostgreSQL' if db_type == 'postgresql' else 'MySQL'}). ‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ IP —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_ip)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_ip –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–º–ø–∞: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–º–ø–∞: {e}",
            reply_markup=keyboard
        )
        if temp_file and temp_file.exists():
            await unlink_file(temp_file)
        if dump_path and dump_path.exists() and dump_path != temp_file:
            await unlink_file(dump_path)
        await state.clear()

@dp.callback_query(lambda c: c.data == "back_to_dump")
async def back_to_dump(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –¥–∞–º–ø–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback back_to_dump –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    dump_message = data.get('dump_message', "‚¨áÔ∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–∞–º–ø–∞ (.sql –∏–ª–∏ .zip) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∏–∂–µ</b>")
    try:
        await callback.message.edit_text(
            dump_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_dump)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_dump: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_ip)
async def process_ip(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ IP —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω IP –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    ip = message.text.strip()
    try:
        parts = ip.split('.')
        if len(parts) != 4 or not all(part.isdigit() and 0 <= int(part) <= 255 for part in parts):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dump")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.X.X.X.",
                reply_markup=keyboard
            )
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP: {ip}")
            return
        await state.update_data(ip=ip, ip_message="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ IP —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.</b>")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_ip")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3306 –¥–ª—è MySQL, 5432 –¥–ª—è PostgreSQL).</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_port)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_port –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ IP: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dump")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ IP: {e}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_ip")
async def back_to_ip(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ IP."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback back_to_ip –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    ip_message = data.get('ip_message', "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ IP —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.</b>")
    try:
        await callback.message.edit_text(
            ip_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dump")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_ip)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_ip: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_port)
async def process_port(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    port = message.text.strip()
    try:
        if not port.isdigit() or not (1 <= int(port) <= 65535):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_ip")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535.",
                reply_markup=keyboard
            )
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç: {port}")
            return
        await state.update_data(port=port, port_message="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3306 –¥–ª—è MySQL, 5432 –¥–ª—è PostgreSQL).</b>")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_port")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_dbname)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_dbname –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_ip")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ç–∞: {e}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_port")
async def back_to_port(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –ø–æ—Ä—Ç–∞."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback back_to_port –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    port_message = data.get('port_message', "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3306 –¥–ª—è MySQL, 5432 –¥–ª—è PostgreSQL).</b>")
    try:
        await callback.message.edit_text(
            port_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_ip")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_port)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_port: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_dbname)
async def process_dbname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    dbname = message.text.strip()
    try:
        if not dbname:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_port")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                reply_markup=keyboard
            )
            logger.warning("–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

        await state.update_data(dbname=dbname, dbname_message="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.</b>")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dbname")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, postgres).</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_username)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_port")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_dbname")
async def back_to_dbname(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback back_to_dbname –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    dbname_message = data.get('dbname_message', "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.</b>")
    try:
        await callback.message.edit_text(
            dbname_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_port")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_dbname)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_dbname: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    username = message.text.strip()
    try:
        if not username:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dbname")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                reply_markup=keyboard
            )
            logger.warning("–ü—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        await state.update_data(username=username, username_message="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, postgres).</b>")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_username")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text="‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_password)
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_password –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dbname")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "back_to_username")
async def back_to_username(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback back_to_username –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    username_message = data.get('username_message', "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, postgres).</b>")
    try:
        await callback.message.edit_text(
            username_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_dbname")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_username)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_username: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    password = message.text.strip()
    dump_path = Path(data['dump_path'])
    db_type = data['db_type']
    ip = data['ip']
    port = data['port']
    dbname = data.get('dbname')
    username = data.get('username')
    temp_file = data.get('temp_file')
    temp_zip = data.get('temp_zip')

    try:
        env = os.environ.copy()
        env['PGPASSWORD' if db_type == 'postgresql' else 'MYSQL_PWD'] = password
        check_db_cmd = [
            'psql' if db_type == 'postgresql' else 'mysql',
            '-h', ip,
            '-P' if db_type == 'mysql' else '-p', port,
            '-u' if db_type == 'mysql' else '-U', username,
            '-d' if db_type == 'postgresql' else '-D', 'postgres' if db_type == 'postgresql' else dbname,
            '-t' if db_type == 'postgresql' else '--batch',
            '-c' if db_type == 'postgresql' else '-e',
            f"SELECT 1 FROM pg_database WHERE datname = '{dbname}';" if db_type == 'postgresql' else f"SHOW DATABASES LIKE '{dbname}';"
        ]
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {check_db_cmd}")
        check_db_result = await run_subprocess(check_db_cmd, env)
        if check_db_result.returncode != 0:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_password")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã {dbname}: {check_db_result.stderr}",
                reply_markup=keyboard
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã {dbname}: {check_db_result.stderr}")
            return

        await state.update_data(password=password)
        if check_db_result.stdout.strip():
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm_overwrite")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_overwrite")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {dbname} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—ë? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.",
                reply_markup=keyboard
            )
            await state.set_state(DeployStates.waiting_for_overwrite_confirmation)
            logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeployStates.waiting_for_overwrite_confirmation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        else:
            logger.debug(f"–ë–∞–∑–∞ {dbname} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
            success, error = await deploy_dump(
                dump_path, db_type, ip, port, dbname, password, username,
                overwrite_confirmed=False, chat_id=chat_id, progress_message_id=current_message_id
            )
            if success:
                await telegram_bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_message_id,
                    text=f"‚úÖ –î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –Ω–∞ {ip}:{port}/{dbname}."
                )
                logger.info(f"–î–µ–ø–ª–æ–π–º–µ–Ω—Ç –¥–∞–º–ø–∞ —É—Å–ø–µ—à–µ–Ω: {dump_path} –Ω–∞ {ip}:{port}/{dbname}")
                if temp_file and temp_file.exists():
                    await unlink_file(temp_file)
                    logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                if dump_path.exists() and (not temp_file or dump_path != temp_file):
                    await unlink_file(dump_path)
                    logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞–º–ø: {dump_path}")
                if temp_zip and temp_zip.exists():
                    logger.debug(f"ZIP-–∞—Ä—Ö–∏–≤ {temp_zip} –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
                await state.clear()
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_password")],
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
                ])
                await telegram_bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=current_message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {error}",
                    reply_markup=keyboard
                )
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞: {error}")
                logger.debug(f"–î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ {ERROR_DUMPS_DIR}/{dump_path.name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_password")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=keyboard
        )
        if temp_file and temp_file.exists():
            await unlink_file(temp_file)
        logger.debug(f"–î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ {ERROR_DUMPS_DIR}/{dump_path.name}")

@dp.callback_query(lambda c: c.data == "retry_password")
async def retry_password(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback retry_password –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    if not data:
        await callback.message.edit_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /backup_deploy –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await callback.answer()
        return
    
    try:
        await callback.message.edit_text(
            "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_username")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_password)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ retry_password: {e}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")

@dp.message(DeployStates.waiting_for_overwrite_confirmation)
async def process_overwrite_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    confirmation = message.text.strip().lower()
    try:
        if confirmation not in ['–¥–∞', '–Ω–µ—Ç']:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm_overwrite")],
                [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_overwrite")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?",
                reply_markup=keyboard
            )
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {confirmation}")
            return
        
        if confirmation == '–¥–∞':
            await confirm_overwrite(types.CallbackQuery(
                id=message.message_id,
                from_user=message.from_user,
                message=message,
                data="confirm_overwrite"
            ), state)
        else:
            await cancel_overwrite(types.CallbackQuery(
                id=message.message_id,
                from_user=message.from_user,
                message=message,
                data="cancel_overwrite"
            ), state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å", callback_data="confirm_overwrite")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_overwrite")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "confirm_overwrite")
async def confirm_overwrite(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback confirm_overwrite –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    dbname = data.get('dbname')
    dump_path = Path(data['dump_path'])
    db_type = data['db_type']
    ip = data['ip']
    port = data['port']
    username = data['username']
    password = data['password']
    temp_file = data.get('temp_file')
    temp_zip = data.get('temp_zip')

    try:
        await callback.answer("–†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ...")
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text="üîÑ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–º–ø–∞ –Ω–∞—á–∞—Ç–æ, –æ–∂–∏–¥–∞–π—Ç–µ...",
            reply_markup=None
        )

        logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞")
        success, error = await deploy_dump(
            dump_path, db_type, ip, port, dbname, password, username,
            overwrite_confirmed=True, chat_id=chat_id, progress_message_id=current_message_id
        )
        if success:
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"‚úÖ –î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –Ω–∞ {ip}:{port}/{dbname}."
            )
            logger.info(f"–î–µ–ø–ª–æ–π–º–µ–Ω—Ç –¥–∞–º–ø–∞ —É—Å–ø–µ—à–µ–Ω: {dump_path} –Ω–∞ {ip}:{port}/{dbname}")
            if temp_file and temp_file.exists():
                await unlink_file(temp_file)
                logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
            if dump_path.exists() and (not temp_file or dump_path != temp_file):
                await unlink_file(dump_path)
                logger.debug(f"–£–¥–∞–ª—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞–º–ø: {dump_path}")
            if temp_zip and temp_zip.exists():
                logger.debug(f"ZIP-–∞—Ä—Ö–∏–≤ {temp_zip} –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            await state.clear()
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_password")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
            await telegram_bot.edit_message_text(
                chat_id=chat_id,
                message_id=current_message_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {error}",
                reply_markup=keyboard
            )
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞: {error}")
            logger.debug(f"–î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ {ERROR_DUMPS_DIR}/{dump_path.name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏: {e}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="retry_password")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
        ])
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=keyboard
        )
        if temp_file and temp_file.exists():
            await unlink_file(temp_file)
        logger.debug(f"–î–∞–º–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ {ERROR_DUMPS_DIR}/{dump_path.name}")

@dp.callback_query(lambda c: c.data == "cancel_overwrite")
async def cancel_overwrite(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏, –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –±–∞–∑—ã."""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback cancel_overwrite –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    current_message_id = data.get('current_message_id')
    chat_id = data.get('chat_id')
    dbname_message = data.get('dbname_message', "‚¨áÔ∏è <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.</b>")
    try:
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=dbname_message,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_port")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(DeployStates.waiting_for_dbname)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏: {e}")
        await telegram_bot.edit_message_text(
            chat_id=chat_id,
            message_id=current_message_id,
            text=f"–û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_deploy")]
            ])
        )
        await callback.answer()